generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Sex {
  NOT_KNOWN
  MALE
  FEMALE
}

enum Level {
  BEGINNER
  ELEMENTARY
  INTERMEDIATE
  ADVANCED
}

enum Rule {
  SINGLES
  DOUBLES
}

model Member {
  id           String        @id @default(cuid())
  ownerId      String        @map("owner_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  name         String
  sex          Sex
  level        Level
  note         String?
  emojiUnicode String        @map("emoji_unicode")
  isDeleted    Boolean       @default(false) @map("is_deleted")
  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  participants Participant[]

  @@map("members")
}

model Place {
  id         String     @id @default(cuid())
  ownerId    String     @map("owner_id")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  name       String
  courtCount Int        @map("court_count")
  isDefault  Boolean    @map("is_default")
  isDeleted  Boolean    @default(false) @map("is_deleted")
  owner      User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  Activity   Activity[]

  @@map("places")
}

model Activity {
  id           String        @id @default(cuid())
  ownerId      String        @map("owner_id")
  placeId      String        @map("place_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  isOpen       Boolean       @map("is_open")
  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  place        Place         @relation(fields: [placeId], references: [id])
  games        Game[]
  participants Participant[]

  @@map("activities")
}

model Participant {
  id         String   @id @default(cuid())
  activityId String   @map("activity_id")
  memberId   String   @map("member_id")
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  member     Member   @relation(fields: [memberId], references: [id])
  players    Player[]
  resters    Rester[]

  @@unique([activityId, memberId])
  @@map("participants")
}

model Game {
  id          String       @id @default(cuid())
  activityId  String       @map("activity_id")
  createdAt   DateTime     @default(now()) @map("created_at")
  activity    Activity     @relation(fields: [activityId], references: [id], onDelete: Cascade)
  gameDetails GameDetail[]
  resters     Rester[]

  @@map("games")
}

model GameDetail {
  id          String   @id @default(cuid())
  gameId      String   @map("game_id")
  courtNumber Int      @map("court_number")
  rule        Rule
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  players     Player[]

  @@unique([gameId, courtNumber])
  @@map("game_details")
}

model Player {
  id            String      @id @default(cuid())
  gameDetailId  String      @map("game_detail_id")
  participantId String      @map("participant_id")
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  gameDetail    GameDetail  @relation(fields: [gameDetailId], references: [id], onDelete: Cascade)

  @@unique([gameDetailId, participantId])
  @@map("players")
}

model Rester {
  id            String      @id @default(cuid())
  gameId        String      @map("game_id")
  participantId String      @map("participant_id")
  game          Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@map("resters")
}

// the models below depend on the Prisma adapter for NextAuth.js, and do not put any domain model under this comment.
// see https://authjs.dev/reference/adapter/prisma
model User {
  id            String     @id @default(cuid())
  name          String     @default("owner")
  email         String     @unique
  emailVerified DateTime   @map("email_verified")
  image         String?
  members       Member[]
  places        Place[]
  activities    Activity[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
